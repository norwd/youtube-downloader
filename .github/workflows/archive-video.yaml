---

name: "Archive Video"
run-name: "Archive Video"

on:
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        required: true
        description: Environment to archive the video in

      url:
        type: string
        required: true
        description: Url of the video to archive

env:
  GH_TOKEN: ${{ secrets.AUTO_DOWNLOAD }}

concurrency:
  group: ${{ github.workflow_ref }}-${{ inputs.environment }}-${{ inputs.url }}
  cancel-in-progress: false

jobs:
  archive-video:
    env:
      URL: ${{ inputs.url }}
      REPO: ${{ vars.repository }}
      FORMAT: |
        ${{ join(fromJSON('[
          "best[filesize<99M]",
          "bestaudio[filesize<99M]",
          "bestaudio",
        ]'), ' / ') }}

    name: "Run youtube-dl"
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:

      - name: Install
        run: |
          git config --global http.postBuffer 524288000
          mkdir -p ~/.local/bin
          echo "~/.local/bin" >> "$GITHUB_PATH"
          curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o ~/.local/bin/yt-dlp
          chmod a+rx ~/.local/bin/yt-dlp
          sudo apt install -y tor
          yt-dlp --version

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ secrets.ref || 'main' }}
          token: ${{ secrets.AUTO_DOWNLOAD }}
          repository: ${{ env.REPO }}

      - name: Determine Target
        id: target
        run: echo "branch=archive/${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}-${{ strategy.job-index }}-$(openssl rand -hex 8)" | tee -a "${GITHUB_OUTPUT}"

      - name: Download
        id: download
        run: |
          yt-dlp "${URL}" \
            --no-simulate \
            --quiet --verbose \
            --no-abort-on-error \
            --proxy socks5h://localhost:9050 \
            --concurrent-fragments "$(nproc)" \
            --restrict-filenames --windows-filenames \
            --format "${FORMAT}" --format-sort "filesize:100M" \
            --print-to-file 'id=%(id)s' "${GITHUB_OUTPUT}" \
            --print-to-file 'title=%(title)s' "${GITHUB_OUTPUT}" \
            --print-to-file 'license=%(license)s' "${GITHUB_OUTPUT}" \
            --print-to-file 'filename=%(filename)s' "${GITHUB_OUTPUT}" \
            --print-to-file 'fulltitle=%(fulltitle)s' "${GITHUB_OUTPUT}" \
            --print-to-file 'alt_title=%(alt_title)s' "${GITHUB_OUTPUT}" \
            --print-to-file 'webpage_url=%(webpage_url)s' "${GITHUB_OUTPUT}" \
            --sleep-subtitles 50 --sleep-requests 50 --sleep-interval 50 --max-sleep-interval 60

      - name: Split Files greater than 100 Megabytes
        run: find . -size +100M -not -path './.git/*' | xargs --verbose -IFILE split --bytes 100m --hex-suffixes --additional-suffix .split "FILE" "FILE."

      - name: Remove Files Over 100 Megabytes
        run: find . -size +100M -not -path './.git/*' | xargs --verbose -IFILE rm -rf FILE

      - name: Push
        run: |
          git checkout -b "${HEAD}"
          git add --verbose .
          git commit --signoff --author="$AUTH{}" --message="${MESG}"
          git push --set-upstream origin "${HEAD}"
          gh pr create --base "${BASE}" --title "${MESG}" --body "${BODY}" | tee -a "${GITHUB_STEP_SUMMARY}"
        env:
          BASE: ${{ github.ref_name }}
          HEAD: ${{ steps.target.outputs.branch }}
          AUTH: norwd <106889957+norwd@users.noreply.github.com>
          MESG: Archive ${{ steps.download.outputs.webpage_url }}
          BODY: |
            * ID: ${{ steps.download.outputs.id }}
            * URL: ${{ steps.download.outputs.webpage_url }}
            * License: ${{ steps.download.outputs.license }}
            * Filename: ${{ steps.download.outputs.filename }}
            * Title: ${{ steps.download.outputs.title }}
            * Title (alt): ${{ steps.download.outputs.alt_title }}
            * Title (full): ${{ steps.download.outputs.fulltitle }}

            **NOTE:** This is an automatic commit. See the archive-video.yaml workflow.

      - name: Merge
        continue-on-error: true # Don't worry if it can't merge, the PR can be manually merged later
        timeout-minutes: 1
        run: until gh pr merge --auto --merge ; do sleep 10 ; done
